/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
//     ListNode* reverse(ListNode* head)
//     {
       
//         ListNode* prev=NULL;
//         ListNode* next;
//         ListNode* curr=head;
        
//         while(curr)
//         {
//             next=curr->next;
//             curr->next=prev;
//             prev=curr;
//             curr=next;
//         }
//         return prev;
//     }
    
    bool isPalindrome(ListNode* head) 
    { 
        if(!head||!head->next)
        {
            return true;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        
        while(  fast&&fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        if(fast != NULL)
        {
            slow = slow -> next;
        }
        
        
        
        
        
        ListNode* prev=NULL;
        ListNode* next;
        ListNode* curr=slow;
        
        while(curr)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        
        while(prev && head)
        {
            if(head->val!=prev->val)
            {
                return false;
            }
            head=head->next;
            prev=prev->next;
        }
        return true;
        
        
    }
};
